# Greenspace Detection Web App - Development History

## 2025-01-27: Batch Processor Enhanced with Year Comparison (2020 vs 2024)

### 🔄 **BREAKTHROUGH: Implemented Year-over-Year Comparison in Batch Processor**

**Problem Solved**: The batch processor was only processing single-year data (July 2020) instead of comparing two years like the GUI application does.

**Solution**: Completely rewrote `batch_process_all_cities.py` to implement the same year comparison logic as the GUI:

#### ✅ **Key Changes Implemented:**
1. **Dual Year Processing**: Now processes both 2020 (baseline) and 2024 (current) data for each city
2. **Same Criteria**: Uses identical NDVI threshold (0.3), cloud coverage threshold (20%), and July month selection
3. **Year-over-Year Analysis**: Calculates percentage changes between 2020 and 2024 vegetation coverage
4. **Comprehensive Output**: Generates separate analysis directories for each year with same file types as GUI
5. **Enhanced Reporting**: Creates detailed CSV reports showing baseline vs current year comparisons

#### ✅ **Processing Logic:**
- **2024 Analysis**: Current year data processing with `PerfectAlignmentSatelliteProcessor`
- **2020 Baseline**: Baseline year processing using same parameters and thresholds
- **Change Calculation**: Computes percentage changes for vegetation, high/medium/low density areas
- **Output Structure**: Creates `2024_analysis/` and `2020_baseline/` subdirectories per city

#### ✅ **Enhanced CSV Reports:**
1. **Main Results**: `year_comparison_results_YYYYMMDD_HHMMSS.csv` with full year comparison data
2. **Summary Statistics**: `year_comparison_summary_YYYYMMDD_HHMMSS.csv` with aggregated metrics
3. **Change Rankings**: `top_cities_by_vegetation_change_YYYYMMDD_HHMMSS.csv` showing biggest changes
4. **Text Report**: `year_comparison_summary_YYYYMMDD_HHMMSS.txt` with detailed analysis

#### ✅ **Data Fields Added:**
- **2020 Baseline**: All vegetation metrics for baseline year
- **2024 Current**: All vegetation metrics for current year  
- **Year-over-Year Changes**: Percentage changes for all vegetation density categories
- **Processing Metadata**: Separate image counts and output files for each year
- **Geographic Bounds**: Bounds data for both years to ensure consistency

#### ✅ **GUI Compatibility:**
- **Same Output Files**: Generates identical file types (PNG images, JSON summaries)
- **Same Processing**: Uses `satellite_processor_fixed.py` with identical configuration
- **Same Thresholds**: NDVI 0.3, cloud coverage <20%, July month selection
- **Same Analysis**: Vegetation highlighting, NDVI visualization, density breakdowns

### 🚀 **Ready for Full City Processing:**
- **Total Cities**: 30 cities in `cities.json` ready for year comparison
- **Expected Output**: 60 analysis directories (30 cities × 2 years) with comprehensive vegetation data
- **Processing Time**: Estimated 2-4 hours for complete batch processing
- **Output Location**: `batch_results/` directory with organized city subdirectories

### 📊 **Next Steps:**
1. Run the enhanced batch processor: `python batch_process_all_cities.py`
2. Monitor progress with real-time city-by-city updates
3. Generate comprehensive year comparison reports
4. Analyze vegetation change patterns across all cities
5. Validate results against GUI application outputs

**Status**: 🎯 **READY FOR EXECUTION** - Batch processor now implements full year comparison matching GUI functionality.

## 2025-07-24: Major Optimization Based on Jupyter Notebook

### 🚀 **BREAKTHROUGH: Implemented Optimized Satellite Processor**

**Problem Solved**: Processing was stuck at 16% due to inefficient 3-script pipeline with concurrent downloads causing memory issues and timeouts.

**Solution**: Created `satellite_processor_optimized.py` based on `satellite_processing_combined.ipynb` approach:

#### ✅ **Key Improvements:**
1. **Single Script Pipeline**: Replaced 3-script approach (download → preprocess → highlight) with one efficient script
2. **Memory-Based Processing**: Downloads directly to memory using `rasterio.MemoryFile` instead of saving large TIFF files
3. **Sequential Processing**: Processes satellite images one-by-one instead of concurrent downloads (more reliable)
4. **Asset Name Fallbacks**: Handles different STAC API naming conventions with fallback logic
5. **Downsampling**: Reads every 2nd pixel for 4x speed improvement
6. **Direct Visualization**: Creates vegetation images directly without intermediate files

#### ✅ **Results for Toronto July 2020:**
- **🌱 Total Vegetation**: **31.5%** (realistic!)
- **🟢 High Density**: **20.4%** (NDVI > 0.6) 
- **🟡 Medium Density**: **7.3%** (NDVI 0.4-0.6)
- **🟣 Low Density**: **3.8%** (NDVI 0.2-0.4)
- **⚡ Processing Time**: **76.7 seconds** (vs previous timeouts)
- **📊 Resolution**: **30.1M pixels** analyzed

#### ✅ **Technical Fixes:**
- **Port Issues**: Fixed hardcoded `localhost:3000` URLs with dynamic `window.location.origin`
- **Directory Structure**: Updated preprocessing to match actual Earth Search API download structure  
- **Asset Mapping**: Fixed band names (`'B04'→'red'`, `'B03'→'green'`, etc.) with fallbacks
- **Progress Reporting**: Real-time progress updates throughout entire pipeline
- **Error Handling**: Comprehensive logging and graceful failure handling

#### ✅ **UI Enhancements:**
- **Vegetation Density Breakdown**: Shows high/medium/low density percentages
- **Interactive NDVI Map**: Displays colored vegetation overlays
- **Real Output Files**: Generates `vegetation_highlighted.png` and `ndvi_visualization.png` 
- **Download Functionality**: Users can download generated visualization files

#### ✅ **Performance Metrics:**
- **Before**: Stuck at 16%, timeouts, 0% vegetation results
- **After**: 31.5% vegetation in 76.7 seconds with proper visualizations
- **Data Efficiency**: ~815MB processed in memory vs GBs of temporary files
- **Success Rate**: 100% processing success vs previous failures

### 🧪 **Technology Stack Validated:**
- **Frontend**: Next.js 14, React, TypeScript, Tailwind CSS, Leaflet maps
- **Backend**: Node.js API routes, Python virtual environment
- **Satellite Data**: Earth Search STAC API (https://earth-search.aws.element84.com/v1)
- **Processing**: Python 3.13, rasterio, numpy, opencv, pystac-client
- **Geospatial**: Polygon-based processing, NDVI calculation, false color imaging

### 📈 **Next Steps:**
- Test with different cities and date ranges
- Add more satellite collections (Landsat, etc.)
- Implement caching for repeat queries
- Add export formats (GeoTIFF, KML)
- Expand NDVI threshold customization

**Status**: 🎉 **FULLY FUNCTIONAL** - Web app now successfully processes real satellite data and generates accurate vegetation analysis with interactive visualizations.

## 2025-01-27: Vegetation Change Visualization Feature

### 🎨 **NEW FEATURE: Visual Vegetation Change Analysis**

**Feature**: Added composite image generation that visually shows areas of vegetation gain/loss between comparison years.

#### ✅ **Implementation Details:**

1. **Change Visualization Script** (`generate_change_visualization.py`):
   - Loads best NDVI data from baseline and compare years
   - Creates color-coded composite image showing vegetation changes
   - **Green areas**: New vegetation (gain)
   - **Red areas**: Lost vegetation (loss)
   - **Light green**: Stable vegetation (unchanged)
   - **Gray**: Consistently no vegetation
   - **Black**: Outside city boundaries

2. **API Integration**:
   - Integrated into annual comparison workflow (`/api/process`)
   - Automatically generates change visualization after baseline/compare processing
   - Saves `vegetation_change.png` and `change_stats.json` files
   - Includes change statistics in API response

3. **UI Enhancement** (ResultsPanel.tsx):
   - Added dedicated "Vegetation Change Analysis" section
   - Displays gain/loss/stable percentages with color-coded indicators
   - Shows change visualization image when available
   - Integrated with existing annual comparison display

4. **Statistics Provided**:
   - Vegetation gain percentage and pixel count
   - Vegetation loss percentage and pixel count  
   - Stable vegetation percentage and pixel count
   - Total city pixels for context

#### ✅ **Usage:**
- Automatically generated during annual comparison mode
- Provides immediate visual understanding of vegetation changes
- Valuable for urban planning and environmental monitoring
- Complements numerical statistics with intuitive visual representation

**Status**: ✅ **IMPLEMENTED** - Change visualization feature fully integrated and functional.

#### 🔧 **Bug Fixes Applied:**
- **Fixed Batch Mode Integration**: Added change visualization generation to multi-city batch processing workflow
- **Fixed Data Persistence**: Modified satellite processor to save NDVI numpy arrays and city masks required for change visualization
- **Enhanced UI Display**: Updated SummaryPanel to show change visualization images and statistics for each city in batch results
- **Improved Error Handling**: Added proper fallback for missing change visualization data

#### 📊 **Current Status:**
- Single-city annual comparison: ✅ Working with change visualization
- Multi-city batch processing: ✅ Updated to include change visualization
- UI display: ✅ Shows change images and statistics in batch results
- Data persistence: ✅ Saves required NDVI and mask data for visualization generation

## 2025-08-27: Year-comparison CSV correctness fixes and diagnostics

- Changed `batch_process_all_cities.py` to compute vegetation change as absolute difference (2024 − 2020) in percentage points, not relative percent.
- Switched high/medium/low density "change" to absolute differences as well (percentage points).
- Added `cloud_excluded_percentage_2020` and `_2024` to CSV to help diagnose anomalies due to heavy cloud masking or coverage issues.
- In `satellite_processor_fixed.py`, tightened image fallback: broadened search stays within the target year instead of 2020–2022, preventing cross-year contamination.
- Standardized denominator for percentages to full city area, ensuring consistency between years even with cloud masking.
- Action: Regenerate batch CSVs to verify outliers (Chancay 2020=0%, Seoul/Manta/San Fernando large changes, Manchester/Dhaka identical values, Iquique 2024=0%) against coverage/cloud metrics and bounds.

## 2025-08-27: Batch runner annual averaging mode (parity with main app)

- Added `--annual` flag to `batch_process_all_cities.py` to run monthly-best processing across all 12 months per year (2020 and 2024) and average vegetation/density metrics, matching the main app’s yearly methodology.
- Annual mode uses the same pipeline features as the app: city-polygon masking, SCL cloud/shadow/water exclusion, enhanced coverage checks, and multi-tile gap filling.
- CSVs now reflect annual averages when `--annual` is used; year-over-year change remains absolute percentage points (2024 − 2020).
- Validated on Manchester; annual averages produced plausible month-to-month variability and stable annual mean. Running flagged cities (Chancay, Seoul, Manta, San Fernando, Manchester, Dhaka, Iquique) to verify anomalies.

## 2025-08-27: Live progress 500 errors fixed (Next.js dev)

- Root cause: `next.config.js` forced static `output: 'export'`, which breaks dynamic API routes and SSE in dev, leading to 500s on `/api/status` and `/api/status/stream`.
- Fixes applied:
  - Made static export conditional via env (`NEXT_OUTPUT=export` or `STATIC_EXPORT=true`).
  - Added `export const runtime = 'nodejs'` to `greenspace-app/src/app/api/status/[id]/route.ts` and `.../status/stream/[id]/route.ts` to ensure Node runtime for FS + SSE.
- Result: Visual progress is restored; polling and SSE endpoints return 200 in local development.

## 2025-08-27: Parallel processing with concurrency cap

- Implemented a lightweight concurrency pool in `greenspace-app/src/app/api/process/route.ts`.
- Months now run in parallel (annual single-city and batch modes) with limit `GREENSPACE_MAX_WORKERS` (default ≈ 75% of CPU, max 12).
- Intended to achieve up to ~10x speedup on multi-core machines while keeping system stable.

## 2025-08-27: Fixed "Invalid time value" client error post-processing

- Root cause: dates persisted in `public/outputs/*/status.json` are ISO strings with microseconds and without timezone; UI assumed `Date` objects and called `new Date(value)` directly, which can yield an invalid Date in the packaged app context.
- Implemented robust date handling:
  - Added `safeParseDate()` and `formatTimeAgo()` to `src/lib/utils.ts` using `date-fns/parseISO` with UTC fallback.
  - Updated `ProcessingPanel` to use `formatTimeAgo()` for `startTime`/`endTime` rendering.
  - Relaxed `ProcessingStatus.startTime/endTime` types to `Date | string | number` to match file-backed status.
  - Normalized dates in `processing-store.updateProcessingJob()` using `safeParseDate`.
  - Ensured status responses are non-cached.
- Verified: processing completes and UI renders without RangeError; works in local server build and packaged app.

## 2025-07-24: Interactive Map Integration Complete

### 🗺️ **Interactive Vegetation Map Successfully Added**

**Problem**: Need to display vegetation analysis results on an interactive map with overlays.

**Solution**: Implemented full Leaflet integration with georeferenced vegetation overlays.

#### ✅ **Features Added:**
1. **Interactive Leaflet Map**: Shows city boundaries with multiple base layers (OpenStreetMap, Satellite)
2. **Vegetation Overlays**: Color-coded vegetation highlighting and NDVI visualization overlays
3. **Layer Controls**: Toggle between vegetation highlighting and NDVI visualization
4. **Geographic Integration**: Uses actual city polygon bounds from cities.json
5. **Responsive Design**: 400px height with zoom/pan controls and legend

#### ✅ **Technical Implementation:**
- **Dependencies**: `leaflet@1.9.4`, `react-leaflet@4.2.1`, `@types/leaflet`
- **SSR Fix**: Dynamic imports with `ssr: false` to prevent server-side rendering issues
- **Components**: New `VegetationMap.tsx` with proper client-side only rendering
- **Enhanced Processor**: Added geographic bounds and city info to output summary
- **Integration**: Seamlessly integrated into `ResultsPanel.tsx` below statistics

#### ✅ **SSR Error Resolution:**
- **Problem**: `ReferenceError: window is not defined` during server-side rendering
- **Fix**: Used Next.js `dynamic()` import with `ssr: false` and mounted state checks
- **Result**: Clean server startup at http://localhost:3000 without errors

#### ✅ **Map Features:**
- **Base Layers**: OpenStreetMap (default) and Satellite imagery
- **Vegetation Overlays**: Semi-transparent (70% opacity) georeferenced overlays
- **City Boundaries**: Dashed blue outline showing processing area
- **Legend**: Interactive legend explaining vegetation density colors and map controls
- **Layer Control**: Top-right controls to toggle overlays on/off independently

**Current Status**: Interactive map working with existing 7.2% vegetation results. Ready for testing at http://localhost:3000. 

## 2025-07-24: Status Tracking System Fixed - Punaauia Test SUCCESS

### 🐛 **Critical Bug Fixed: Status API 404 Errors**

**Problem**: Processing jobs were working but status polling always returned 404 errors due to Next.js hot reload clearing in-memory Map.

**Root Cause**: The `processingJobs` Map was being cleared during Next.js development mode hot reloads, causing different API routes to have different instances of the Map.

#### ✅ **Solution Implemented:**
1. **Shared Processing Store**: Created `/src/lib/processing-store.ts` with module-level storage
2. **Centralized Functions**: `setProcessingJob()`, `getProcessingJob()`, `updateProcessingJob()`, `getAllProcessingJobIds()`
3. **Fixed Import Issues**: Removed old exports and updated all API routes to use shared store
4. **Persistent Memory**: Jobs now persist across hot reloads during development

#### ✅ **Test Results for Punaauia, French Polynesia:**
- ✅ **Processing Job Creation**: Successfully created with unique ID
- ✅ **Status Tracking**: Real-time progress updates working (2% → progress)
- ✅ **Satellite Data Access**: Successfully downloading from French Polynesia coordinates
- ✅ **Python Processing**: Script execution working correctly
- ✅ **API Stability**: Status API returning 200 OK instead of 404 errors

#### ✅ **Technical Verification:**
```bash
# Start processing
curl -X POST /api/process → {"processingId":"bbd6175e-..."}

# Check status (previously 404, now 200 OK)
curl /api/status/bbd6175e-... → {"progress":2,"status":"downloading"}
```

**Current Status**: 🎉 **Status tracking system fully functional**. Ready for comprehensive testing with all cities and frontend integration. 

## 2025-08-20: QoLI Methodology Alignment Updates

- Sentinel-2 only workflow affirmed; boundaries sourced from root `cities.json` and exposed via new API route `/api/cities`.
- Implemented per-pixel SCL masking (exclude classes 0,1,3,6,8,9,10,11) to remove clouds, shadows, water from analysis and stats.
- Kept monthly compositing by using least-cloudy scenes with median combination of valid pixels (where multiple items available).
- Continued NDVI-only classification into density ranges; removed references to ML thresholds.
- Added optional percent change vs 2020 baseline: computes same-month 2020 vegetation% and reports ((current-2020)/2020)*100 when the selected year ≠ 2020.
- Updated `greenspace-app/README.md` to document the above methodology.

## 2025-01-29: AWS Deployment Infrastructure Setup

### 🚀 **AWS Deployment Configuration Complete**

**Objective**: Deploy the Greenspace vegetation analysis application on AWS using Terraform infrastructure-as-code, following the pattern from the mobility-data-lifecycle-manager reference project.

#### ✅ **Infrastructure Components Created:**

1. **Terraform Configuration** (`main.tf`):
   - EC2 t3.medium instance with 50GB EBS storage on Amazon Linux 2
   - Security groups allowing HTTP (80), HTTPS (443), SSH (22), and app port (8000)
   - IAM roles and policies for basic CloudWatch logging (no S3 permissions needed)
   - Route53 DNS record for `greenspace.qolimpact.click`
   - Minimal permissions approach (no S3, SNS, or monitoring services)

2. **EC2 Initialization Script** (`user_data.sh`):
   - Installs Python 3.8, Node.js, npm, and required system packages
   - Installs geospatial libraries (GDAL, PROJ, GEOS) for satellite processing
   - Clones greenspace-mei repository from GitHub during startup
   - Sets up Python virtual environment and installs FastAPI dependencies
   - Builds and exports Next.js application for static serving
   - Configures Nginx reverse proxy with SSL/TLS via Let's Encrypt
   - Creates systemd service for automatic app startup and management

3. **Deployment Scripts**:
   - `deploy.sh`: Complete deployment automation with AWS credential handling
   - `update_ec2.sh`: Application code updates without infrastructure changes
   - `troubleshoot.sh`: Comprehensive diagnostic and monitoring script

4. **SSL/HTTPS Configuration**:
   - Automatic Let's Encrypt certificate generation for `greenspace.qolimpact.click`
   - Nginx configuration with HTTPS redirect and proper proxy headers
   - Auto-renewal cron job for certificate maintenance

#### ✅ **Architecture Design:**
- **Application**: FastAPI backend serving static Next.js build on port 8000
- **Web Server**: Nginx reverse proxy handling SSL termination and static files
- **Domain**: `greenspace.qolimpact.click` with Route53 DNS management
- **Security**: Minimal IAM permissions, systemd service isolation, HTTPS-only
- **Deployment**: Git-based code deployment during EC2 initialization
- **Monitoring**: Basic systemd service management and log collection

#### ✅ **Key Features:**
- **No External Dependencies**: Self-contained deployment without S3, RDS, or other AWS services
- **File-Based Storage**: Uses local `cities.json` file for city data management
- **Public Access**: Fully accessible web application without authentication requirements
- **Cost Effective**: Minimal AWS resource usage (~$35-40/month estimated)
- **Easy Updates**: Simple script-based application updates via `update_ec2.sh`

#### ✅ **Deployment Process:**
1. Configure `terraform.tfvars` with Route53 zone ID
2. Run `./deploy.sh` for complete infrastructure deployment
3. Wait 5-10 minutes for EC2 initialization and SSL certificate generation
4. Access application at `https://greenspace.qolimpact.click`

#### ✅ **Management Commands:**
- **Deploy**: `./deploy.sh` (initial deployment)
- **Update**: `./update_ec2.sh` (code updates)
- **Debug**: `./troubleshoot.sh` (diagnostics)
- **SSH**: `ssh -i salman-dev.pem ec2-user@<ip>`

#### ✅ **Validation Results:**
- Terraform configuration validated successfully
- All template syntax issues resolved
- Infrastructure plan shows 6 resources to be created
- Scripts are executable and ready for deployment

**Status**: 🎯 **READY FOR DEPLOYMENT** - Complete AWS infrastructure configuration created and validated. Run `./deploy.sh` to deploy the Greenspace application to production.